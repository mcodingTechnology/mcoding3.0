<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.els.runhe.warehouse.dao.StockMapper" >
  <resultMap id="BaseResultMap" type="com.els.runhe.warehouse.entity.Stock" >
    <id column="ID" property="id" jdbcType="VARCHAR" />
    <result column="WAREHOUSE_ID" property="warehouseId" jdbcType="VARCHAR" />
    <result column="WAREHOUSE_NAME" property="warehouseName" jdbcType="VARCHAR" />
    <result column="PRODUCT_ID" property="productId" jdbcType="VARCHAR" />
    <result column="PRODUCT_NAME" property="productName" jdbcType="VARCHAR" />
    <result column="PRODUCT_CODE" property="productCode" jdbcType="VARCHAR" />
    <result column="PRODUCT_MODEL" property="productModel" jdbcType="VARCHAR" />
    <result column="PRODUCT_UNIT" property="productUnit" jdbcType="VARCHAR" />
    <result column="AMOUNT" property="amount" jdbcType="INTEGER" />
    <result column="TOTAL_AMOUNT" property="totalAmount" jdbcType="INTEGER" />
    <result column="FREEZE_AMOUNT" property="freezeAmount" jdbcType="INTEGER" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
    <result column="UPDATE_TIME" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="IS_ENABLE" property="isEnable" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID, WAREHOUSE_ID, WAREHOUSE_NAME, PRODUCT_ID, PRODUCT_NAME, PRODUCT_CODE, PRODUCT_MODEL, 
    PRODUCT_UNIT, AMOUNT, TOTAL_AMOUNT, FREEZE_AMOUNT, CREATE_TIME, UPDATE_TIME, IS_ENABLE
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.els.runhe.warehouse.entity.StockExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from t_stock
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from t_stock
    where ID = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from t_stock
    where ID = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.els.runhe.warehouse.entity.StockExample" >
    delete from t_stock
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.els.runhe.warehouse.entity.Stock" >
    <bind name="_uuid" value="@com.els.base.utils.uuid.UUIDGenerator@generateUUIDAndSetId(#this)"/>
    insert into t_stock (ID, WAREHOUSE_ID, WAREHOUSE_NAME, 
      PRODUCT_ID, PRODUCT_NAME, PRODUCT_CODE, 
      PRODUCT_MODEL, PRODUCT_UNIT, AMOUNT, 
      TOTAL_AMOUNT, FREEZE_AMOUNT, CREATE_TIME, 
      UPDATE_TIME, IS_ENABLE)
    values (#{_uuid}, #{warehouseId,jdbcType=VARCHAR}, #{warehouseName,jdbcType=VARCHAR}, 
      #{productId,jdbcType=VARCHAR}, #{productName,jdbcType=VARCHAR}, #{productCode,jdbcType=VARCHAR}, 
      #{productModel,jdbcType=VARCHAR}, #{productUnit,jdbcType=VARCHAR}, #{amount,jdbcType=INTEGER}, 
      #{totalAmount,jdbcType=INTEGER}, #{freezeAmount,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{isEnable,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.els.runhe.warehouse.entity.Stock" >
    <bind name="_uuid" value="@com.els.base.utils.uuid.UUIDGenerator@generateUUIDAndSetId(#this)"/>
    insert into t_stock
    <trim prefix="(" suffix=")" suffixOverrides="," >
      ID,
      <if test="warehouseId != null" >
        WAREHOUSE_ID,
      </if>
      <if test="warehouseName != null" >
        WAREHOUSE_NAME,
      </if>
      <if test="productId != null" >
        PRODUCT_ID,
      </if>
      <if test="productName != null" >
        PRODUCT_NAME,
      </if>
      <if test="productCode != null" >
        PRODUCT_CODE,
      </if>
      <if test="productModel != null" >
        PRODUCT_MODEL,
      </if>
      <if test="productUnit != null" >
        PRODUCT_UNIT,
      </if>
      <if test="amount != null" >
        AMOUNT,
      </if>
      <if test="totalAmount != null" >
        TOTAL_AMOUNT,
      </if>
      <if test="freezeAmount != null" >
        FREEZE_AMOUNT,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME,
      </if>
      <if test="isEnable != null" >
        IS_ENABLE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{_uuid},
      <if test="warehouseId != null" >
        #{warehouseId,jdbcType=VARCHAR},
      </if>
      <if test="warehouseName != null" >
        #{warehouseName,jdbcType=VARCHAR},
      </if>
      <if test="productId != null" >
        #{productId,jdbcType=VARCHAR},
      </if>
      <if test="productName != null" >
        #{productName,jdbcType=VARCHAR},
      </if>
      <if test="productCode != null" >
        #{productCode,jdbcType=VARCHAR},
      </if>
      <if test="productModel != null" >
        #{productModel,jdbcType=VARCHAR},
      </if>
      <if test="productUnit != null" >
        #{productUnit,jdbcType=VARCHAR},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=INTEGER},
      </if>
      <if test="totalAmount != null" >
        #{totalAmount,jdbcType=INTEGER},
      </if>
      <if test="freezeAmount != null" >
        #{freezeAmount,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isEnable != null" >
        #{isEnable,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.els.runhe.warehouse.entity.StockExample" resultType="java.lang.Integer" >
    select count(*) from t_stock
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_stock
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.warehouseId != null" >
        WAREHOUSE_ID = #{record.warehouseId,jdbcType=VARCHAR},
      </if>
      <if test="record.warehouseName != null" >
        WAREHOUSE_NAME = #{record.warehouseName,jdbcType=VARCHAR},
      </if>
      <if test="record.productId != null" >
        PRODUCT_ID = #{record.productId,jdbcType=VARCHAR},
      </if>
      <if test="record.productName != null" >
        PRODUCT_NAME = #{record.productName,jdbcType=VARCHAR},
      </if>
      <if test="record.productCode != null" >
        PRODUCT_CODE = #{record.productCode,jdbcType=VARCHAR},
      </if>
      <if test="record.productModel != null" >
        PRODUCT_MODEL = #{record.productModel,jdbcType=VARCHAR},
      </if>
      <if test="record.productUnit != null" >
        PRODUCT_UNIT = #{record.productUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.amount != null" >
        AMOUNT = #{record.amount,jdbcType=INTEGER},
      </if>
      <if test="record.totalAmount != null" >
        TOTAL_AMOUNT = #{record.totalAmount,jdbcType=INTEGER},
      </if>
      <if test="record.freezeAmount != null" >
        FREEZE_AMOUNT = #{record.freezeAmount,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isEnable != null" >
        IS_ENABLE = #{record.isEnable,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_stock
    set ID = #{record.id,jdbcType=VARCHAR},
      WAREHOUSE_ID = #{record.warehouseId,jdbcType=VARCHAR},
      WAREHOUSE_NAME = #{record.warehouseName,jdbcType=VARCHAR},
      PRODUCT_ID = #{record.productId,jdbcType=VARCHAR},
      PRODUCT_NAME = #{record.productName,jdbcType=VARCHAR},
      PRODUCT_CODE = #{record.productCode,jdbcType=VARCHAR},
      PRODUCT_MODEL = #{record.productModel,jdbcType=VARCHAR},
      PRODUCT_UNIT = #{record.productUnit,jdbcType=VARCHAR},
      AMOUNT = #{record.amount,jdbcType=INTEGER},
      TOTAL_AMOUNT = #{record.totalAmount,jdbcType=INTEGER},
      FREEZE_AMOUNT = #{record.freezeAmount,jdbcType=INTEGER},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      IS_ENABLE = #{record.isEnable,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.els.runhe.warehouse.entity.Stock" >
    update t_stock
    <set >
      <if test="warehouseId != null" >
        WAREHOUSE_ID = #{warehouseId,jdbcType=VARCHAR},
      </if>
      <if test="warehouseName != null" >
        WAREHOUSE_NAME = #{warehouseName,jdbcType=VARCHAR},
      </if>
      <if test="productId != null" >
        PRODUCT_ID = #{productId,jdbcType=VARCHAR},
      </if>
      <if test="productName != null" >
        PRODUCT_NAME = #{productName,jdbcType=VARCHAR},
      </if>
      <if test="productCode != null" >
        PRODUCT_CODE = #{productCode,jdbcType=VARCHAR},
      </if>
      <if test="productModel != null" >
        PRODUCT_MODEL = #{productModel,jdbcType=VARCHAR},
      </if>
      <if test="productUnit != null" >
        PRODUCT_UNIT = #{productUnit,jdbcType=VARCHAR},
      </if>
      <if test="amount != null" >
        AMOUNT = #{amount,jdbcType=INTEGER},
      </if>
      <if test="totalAmount != null" >
        TOTAL_AMOUNT = #{totalAmount,jdbcType=INTEGER},
      </if>
      <if test="freezeAmount != null" >
        FREEZE_AMOUNT = #{freezeAmount,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isEnable != null" >
        IS_ENABLE = #{isEnable,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.els.runhe.warehouse.entity.Stock" >
    update t_stock
    set WAREHOUSE_ID = #{warehouseId,jdbcType=VARCHAR},
      WAREHOUSE_NAME = #{warehouseName,jdbcType=VARCHAR},
      PRODUCT_ID = #{productId,jdbcType=VARCHAR},
      PRODUCT_NAME = #{productName,jdbcType=VARCHAR},
      PRODUCT_CODE = #{productCode,jdbcType=VARCHAR},
      PRODUCT_MODEL = #{productModel,jdbcType=VARCHAR},
      PRODUCT_UNIT = #{productUnit,jdbcType=VARCHAR},
      AMOUNT = #{amount,jdbcType=INTEGER},
      TOTAL_AMOUNT = #{totalAmount,jdbcType=INTEGER},
      FREEZE_AMOUNT = #{freezeAmount,jdbcType=INTEGER},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      IS_ENABLE = #{isEnable,jdbcType=INTEGER}
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <select id="selectByExampleByPage" resultMap="BaseResultMap" parameterType="com.els.runhe.warehouse.entity.StockExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from t_stock
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <insert id="insertBatch" parameterType="com.els.runhe.warehouse.entity.Stock" >
    insert into t_stock (ID, WAREHOUSE_ID, WAREHOUSE_NAME, PRODUCT_ID, 
      PRODUCT_NAME, PRODUCT_CODE, PRODUCT_MODEL, 
      PRODUCT_UNIT, AMOUNT, TOTAL_AMOUNT, FREEZE_AMOUNT, 
      CREATE_TIME, UPDATE_TIME, IS_ENABLE
      ) values 
    <foreach collection="list" item="item" index="index" separator="," >
      (#{item.id,jdbcType=VARCHAR}, #{item.warehouseId,jdbcType=VARCHAR}, #{item.warehouseName,jdbcType=VARCHAR}, 
        #{item.productId,jdbcType=VARCHAR}, 
        #{item.productName,jdbcType=VARCHAR}, #{item.productCode,jdbcType=VARCHAR}, #{item.productModel,jdbcType=VARCHAR}, 
        #{item.productUnit,jdbcType=VARCHAR}, #{item.amount,jdbcType=INTEGER}, #{item.totalAmount,jdbcType=INTEGER}, 
        #{item.freezeAmount,jdbcType=INTEGER}, 
        #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}, #{item.isEnable,jdbcType=INTEGER}
        )
    </foreach>
  </insert>
  <!-- 新增，非自动生成 -->
  <!-- 最小字段列表，少了TOTAL_AMOUNT字段 -->
  <sql id="Min_Column_List" >
    ID, WAREHOUSE_ID, WAREHOUSE_NAME, PRODUCT_ID, PRODUCT_NAME, PRODUCT_CODE, PRODUCT_MODEL, 
    PRODUCT_UNIT, AMOUNT, FREEZE_AMOUNT, CREATE_TIME, UPDATE_TIME, IS_ENABLE
  </sql>
  <select id="selectForProductByExampleByPage" resultMap="BaseResultMap" parameterType="com.els.runhe.warehouse.entity.StockExample" >
    select SUM(AMOUNT) as TOTAL_AMOUNT,
    <include refid="Min_Column_List" />
    from t_stock
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    GROUP BY PRODUCT_ID 
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
</mapper>